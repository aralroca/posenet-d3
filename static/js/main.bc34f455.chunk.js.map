{"version":3,"sources":["components/svgGraph.js","components/posenet.js","index.js"],"names":["SVGGraph","shouldComponentUpdate","redraw","_this","svg","selectAll","remove","draw","this","window","addEventListener","removeEventListener","width","container","clientWidth","height","clientHeight","_this$props$graph","props","graph","nodes","_this$containerSize","links","containerSize","d3","mySvg","attr","node","append","data","d","id","enter","r","force","on","concat","x","y","_this2","react_default","a","createElement","className","ref","Component","defaultProps","MILLISECONDS","imageScaleFactor","outputStride","flipHorizontal","weight","PoseNet","state","poses","loading","componentDidMount","_callee","regenerator_default","wrap","_context","prev","next","posenet","net","sent","initCapture","stop","isMobile","isAndroid","test","navigator","userAgent","isiOS","loadVideo","_callee2","videoElement","video","_context2","setupCamera","play","abrupt","_callee3","mobile","stream","_context3","videoSize","mediaDevices","getUserMedia","audio","facingMode","undefined","srcObject","Promise","resolve","onloadedmetadata","reject","setRef","_callee4","_context4","timeout","setTimeout","capture","_callee5","_context5","estimateSinglePose","keypoints","setState","reduce","obj","point","Object","objectSpread","defineProperty","part","children","playsInline","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","source","target","arr","pose","position","score","toConsumableArray","nodesIDs","map","filter","link","includes","getNodesWithPosition","getLinks","posenet_PoseNet","_ref","svgGraph_SVGGraph","getGraph","render","src_App","document","getElementById"],"mappings":"mSAKqBA,6MACnBC,sBAAwB,kBAAM,KAsB9BC,OAAS,WACHC,EAAKC,KACPD,EAAKC,IAAIC,UAAU,KAAKC,SAG1BH,EAAKI,2FAxBLC,KAAKD,OACLE,OAAOC,iBAAiB,SAAUF,KAAKN,4DAIvCM,KAAKN,wDAILO,OAAOE,oBAAoB,SAAUH,KAAKN,gDAI1C,MAAO,CACLU,MAAOJ,KAAKK,UAAUC,YACtBC,OAAQP,KAAKK,UAAUG,6CAYpB,IAAAC,EACoBT,KAAKU,MAAMC,MAA5BC,EADHH,EACGG,MADHC,GAAAJ,EACUK,MACWd,KAAKe,iBAAvBX,EAFHS,EAEGT,MAAOG,EAFVM,EAEUN,OACfP,KAAKJ,IAAMoB,IAAUhB,KAAKiB,OACvBC,KAAK,QAASd,GACdc,KAAK,SAAUX,GAElB,IAAMY,EAAOnB,KAAKJ,IAAIwB,OAAO,KAC1BvB,UAAU,KACVwB,KAAKT,EAAO,SAAAU,GAAC,OAAIA,EAAEC,KACnBC,QACAJ,OAAO,KAEMD,EAAKC,OAAO,UACzBF,KAAK,IAAK,SAAAI,GAAC,OAAIA,EAAEG,IACjBP,KAAK,OAAQ,WAUEF,MACfU,MAAM,OAAQV,MAAeO,GAAG,SAAAD,GAAC,OAAIA,EAAEC,MACvCG,MAAM,SAAUV,IAAeZ,EAAQ,EAAGG,EAAS,IAanDK,MAAMA,GACNe,GAAG,OAZS,WAMbR,EACGD,KAAK,YAAa,SAAAI,GAAC,mBAAAM,OAAiBN,EAAEO,EAAnB,MAAAD,OAAyBN,EAAEQ,EAA3B,0CAYjB,IAAAC,EAAA/B,KACP,OACEgC,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVC,IAAK,SAAAA,GAASL,EAAK1B,UAAY+B,IAE/BJ,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAAAA,GAASL,EAAKd,MAAQmB,aArFFC,aA+FtC7C,EAAS8C,aAAe,CACtB3B,MAAO,CAAEC,MAAO,GAAIE,MAAO,iDChGvByB,EAAe,GACfC,EAAmB,GACnBC,EAAe,GACfC,GAAiB,EACjBC,EAAS,GAGMC,6MACnBC,MAAQ,CACNC,MAAO,GACPC,SAAS,KAGXC,uCAAqB,SAAAC,IAAA,OAAAC,EAAAjB,EAAAkB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACFC,IAAaZ,GADX,OACnBhD,EAAK6D,IADcJ,EAAAK,KAEnB9D,EAAK+D,cAFc,wBAAAN,EAAAO,SAAAV,EAAAjD,WAKrB4D,SAAW,WACT,IAAMC,EAAY,WAAWC,KAAKC,UAAUC,WACtCC,EAAQ,oBAAoBH,KAAKC,UAAUC,WAEjD,OAAOH,GAAaI,KAGtBC,gDAAY,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAnB,EAAAjB,EAAAkB,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EACU3D,EAAK4E,YAAYH,GAD3B,cACJC,EADIC,EAAAb,MAGJe,OAHIF,EAAAG,OAAA,SAKHJ,GALG,wBAAAC,EAAAX,SAAAQ,EAAAnE,iEAQZuE,kDAAe,SAAAG,EAAON,GAAP,IAAAO,EAAAC,EAAA,OAAA1B,EAAAjB,EAAAkB,KAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,UACbc,EAAahE,MAAQT,EAAKe,MAAMoE,UAChCV,EAAa7D,OAASZ,EAAKe,MAAMoE,WAE7Bf,UAAUgB,eAAgBhB,UAAUgB,aAAaC,aAJxC,CAAAH,EAAAvB,KAAA,gBAKLqB,EAAShF,EAAKiE,WALTiB,EAAAvB,KAAA,EAMUS,UAAUgB,aAAaC,aAAa,CACvDC,OAAS,EACTZ,MAAS,CACPa,WAAY,OACZ9E,MAAOuE,OAASQ,EAAYxF,EAAKe,MAAMoE,UACvCvE,OAAQoE,OAASQ,EAAWxF,EAAKe,MAAMoE,aAXhC,cAMLF,EANKC,EAAApB,KAaXW,EAAagB,UAAYR,EAbdC,EAAAJ,OAAA,SAeJ,IAAIY,QAAQ,SAAAC,GACjBlB,EAAamB,iBAAmB,WAC9BD,EAAQlB,OAjBD,eAAAS,EAAAJ,OAAA,SAqBJY,QAAQG,OAAO,kBArBX,yBAAAX,EAAAlB,SAAAe,EAAA1E,iEAyBfyF,6CAAS,SAAAC,EAAOtB,GAAP,OAAAlB,EAAAjB,EAAAkB,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,OACP3D,EAAKyE,aAAeA,EADb,wBAAAuB,EAAAhC,SAAA+B,EAAA1F,iEAIT0D,YAAc,WACZ/D,EAAKiG,QAAUC,WAAWlG,EAAKmG,QAASvD,MAG1CuD,6BAAU,SAAAC,IAAA,IAAAjD,EAAA,OAAAI,EAAAjB,EAAAkB,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,UAEJ3D,EAAKyE,cAAiBzE,EAAK6D,IAFvB,CAAAwC,EAAA1C,KAAA,eAGN3D,EAAK+D,cAHCsC,EAAAvB,OAAA,oBAOJ9E,EAAK0E,QAAS1E,EAAKyE,aAPf,CAAA4B,EAAA1C,KAAA,eAAA0C,EAAA1C,KAAA,EAQa3D,EAAKuE,UAAUvE,EAAKyE,cARjC,OAQNzE,EAAK0E,MARC2B,EAAAvC,KAAA,cAAAuC,EAAA1C,KAAA,EAWY3D,EAAK6D,IACtByC,mBAAmBtG,EAAK0E,MAAO7B,EAAkBE,EAAgBD,GAZ5D,QAWFK,EAXEkD,EAAAvC,MAcCyC,WAAWvG,EAAKwG,SAAS,CAChCpD,SAAS,EACTD,MAAOA,EAAMoD,UACJE,OAAO,SAACC,EAAKC,GAAN,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAsBF,EAAtBE,OAAAE,EAAA,EAAAF,CAAA,GACLD,EAAMI,KAAOJ,KACZ,MAEd3G,EAAK+D,cArBG,yBAAAsC,EAAArC,SAAAoC,EAAA/F,iFAyBR,OAAIA,KAAKU,MAAMiG,SAKb3E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQyE,aAAW,EAACxE,IAAKpC,KAAKyF,SAC9CzF,KAAKU,MAAMiG,SAAS3G,KAAK6C,QANrB,YArFwBR,aAqGrCO,EAAQN,aAAe,CACrBwC,UAAW,gBC1GP+B,cACJ,SAAAA,IAAc,IAAAlH,EAAA,OAAA4G,OAAAO,EAAA,EAAAP,CAAAvG,KAAA6G,IACZlH,EAAA4G,OAAAQ,EAAA,EAAAR,CAAAvG,KAAAuG,OAAAS,EAAA,EAAAT,CAAAM,GAAAI,KAAAjH,QACKY,MAAQ,CACX,CAAEW,GAAI,OAAQE,EAAG,IACjB,CAAEF,GAAI,eAAgBE,EAAG,GACzB,CAAEF,GAAI,gBAAiBE,EAAG,GAC1B,CAAEF,GAAI,YAAaE,EAAG,GACtB,CAAEF,GAAI,aAAcE,EAAG,GACvB,CAAEF,GAAI,YAAaE,EAAG,IACtB,CAAEF,GAAI,aAAcE,EAAG,IACvB,CAAEF,GAAI,UAAWE,EAAG,GACpB,CAAEF,GAAI,WAAYE,EAAG,GACrB,CAAEF,GAAI,WAAYE,EAAG,GACrB,CAAEF,GAAI,YAAaE,EAAG,GACtB,CAAEF,GAAI,YAAaE,EAAG,IACtB,CAAEF,GAAI,aAAcE,EAAG,KAEzB9B,EAAKmB,MAAQ,CACX,CAAEoG,OAAQ,eAAgBC,OAAQ,iBAClC,CAAED,OAAQ,aAAcC,OAAQ,cAChC,CAAED,OAAQ,aAAcC,OAAQ,iBAChC,CAAED,OAAQ,YAAaC,OAAQ,aAC/B,CAAED,OAAQ,YAAaC,OAAQ,gBAC/B,CAAED,OAAQ,aAAcC,OAAQ,aAChC,CAAED,OAAQ,YAAaC,OAAQ,YAC/B,CAAED,OAAQ,WAAYC,OAAQ,iBAC9B,CAAED,OAAQ,YAAaC,OAAQ,YAC/B,CAAED,OAAQ,WAAYC,OAAQ,WAC9B,CAAED,OAAQ,UAAWC,OAAQ,gBAC7B,CAAED,OAAQ,UAAWC,OAAQ,aA7BnBxH,oFAiCOmD,GACnB,OAAO9C,KAAKY,MAAMwF,OAAO,SAACgB,EAAKjG,GAC7B,IAAMkG,EAAOvE,EAAM3B,EAAKI,KAAO,GACzB+F,EAAYD,EAAKC,UAAY,GAEnC,OAAGD,EAAKE,MAzCG,GA0CFH,EAGT,GAAAxF,OAAA2E,OAAAiB,EAAA,EAAAjB,CAAWa,GAAX,CAAAb,OAAAC,EAAA,EAAAD,CAAA,GAAqBpF,EAASmG,MAC7B,qCAGI1G,GACP,IAAM6G,EAAW7G,EAAM8G,IAAI,SAAAvG,GAAI,OAAIA,EAAKI,KAExC,OAAOvB,KAAKc,MAAM6G,OAAO,SAAAC,GACvB,IAAMV,GAAUU,EAAKV,QAAU,IAAI3F,IAAMqG,EAAKV,OACxCC,GAAUS,EAAKT,QAAU,IAAI5F,IAAMqG,EAAKT,OAE9C,OAAOM,EAASI,SAASX,IAAWO,EAASI,SAASV,sCAIjDrE,GACP,IAAMlC,EAAQZ,KAAK8H,qBAAqBhF,GAExC,MAAO,CAAElC,QAAOE,MAAOd,KAAK+H,SAASnH,qCAG9B,IAAAmB,EAAA/B,KAGP,OACEgC,EAAAC,EAAAC,cAAC8F,EAAD,CAASlD,UAHO,KAKd,SAAAmD,GAAA,IAAGnF,EAAHmF,EAAGnF,MAAH,OAAAmF,EAAUlF,QAEN,aAEAf,EAAAC,EAAAC,cAACgG,EAAD,CACEvH,MAAOoB,EAAKoG,SAASrF,cA3EjBT,aAqFlB+F,iBAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.bc34f455.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { render } from 'react-dom';\nimport * as d3 from 'd3';\n\nexport default class SVGGraph extends Component {\n  shouldComponentUpdate = () => false;\n\n  componentDidMount() {\n    this.draw();\n    window.addEventListener('resize', this.redraw);\n  }\n\n  componentWillReceiveProps() {\n    this.redraw();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.redraw);\n  }\n\n  containerSize() {\n    return {\n      width: this.container.clientWidth,\n      height: this.container.clientHeight,\n    }\n  }\n\n  redraw = () => {\n    if (this.svg) {\n      this.svg.selectAll('*').remove();\n    }\n\n    this.draw();\n  }\n\n  draw() {\n    const { nodes, links } = this.props.graph;\n    const { width, height } = this.containerSize();\n    this.svg = d3.select(this.mySvg)\n      .attr('width', width)\n      .attr('height', height);\n\n    const node = this.svg.append('g')\n      .selectAll('g')\n      .data(nodes, d => d.id)\n      .enter()\n      .append('g')\n\n    const circles = node.append('circle')\n      .attr('r', d => d.r)\n      .attr('fill', '#1565c0');\n\n  /*  const link = this.svg.append('g')\n      .selectAll('line')\n      .data(links)\n      .enter()\n      .append('line')\n      .attr('stroke', '#1565c0')\n      .attr('stroke-width', 5)*/\n\n   const simulation = d3.forceSimulation()\n      .force('link', d3.forceLink().id(d => d.id))  \n      .force('center', d3.forceCenter(width / 2, height / 2));\n\n    const ticked = () => {\n      /*link\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);*/\n      node\n        .attr('transform', d => `translate(${d.x}, ${d.y})`);\n      }\n\n    simulation\n      .nodes(nodes)\n      .on('tick', ticked)\n\n   /* simulation\n      .force('link')\n      .links(links);*/\n  }\n\n  render() {\n    return (\n      <div\n        className=\"container\"\n        ref={ref => { this.container = ref; }}\n      >\n        <svg ref={ref => { this.mySvg = ref;  }} />\n      </div>\n    );\n  }\n}\n\nSVGGraph.propTypes = {\n  graph: PropTypes.object,\n};\n\nSVGGraph.defaultProps = {\n  graph: { nodes: [], links: [] },\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { render } from 'react-dom';\nimport * as posenet from '@tensorflow-models/posenet';\n\nconst MILLISECONDS = 50;\nconst imageScaleFactor = 0.5;\nconst outputStride = 16;\nconst flipHorizontal = true;\nconst weight = 0.5;\nconst initialPosition = 40;\n\nexport default class PoseNet extends Component {\n  state = {\n    poses: {},\n    loading: true,\n  }\n\n  componentDidMount =  async () =>{\n    this.net = await posenet.load(weight);\n    this.initCapture();\n  }\n\n  isMobile = () => {\n    const isAndroid = /Android/i.test(navigator.userAgent);\n    const isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n\n    return isAndroid || isiOS;\n  }\n\n  loadVideo = async (videoElement) => {\n    const video = await this.setupCamera(videoElement);\n\n    video.play();\n  \n    return video;\n  }\n\n  setupCamera =  async (videoElement) => {\n    videoElement.width = this.props.videoSize;\n    videoElement.height = this.props.videoSize;\n  \n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const mobile = this.isMobile();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        'audio': false,\n        'video': {\n          facingMode: 'user',\n          width: mobile ? undefined : this.props.videoSize,\n          height: mobile ? undefined: this.props.videoSize}\n      });\n      videoElement.srcObject = stream;\n  \n      return new Promise(resolve => {\n        videoElement.onloadedmetadata = () => {\n          resolve(videoElement);\n        };\n      });\n    } else {\n      return Promise.reject('No compatible');\n    }\n  }\n\n  setRef = async (videoElement) => {\n    this.videoElement = videoElement;\n  }\n\n  initCapture = () => {\n    this.timeout = setTimeout(this.capture, MILLISECONDS);\n  }\n\n  capture = async () => {\n    let nose;\n    if(!this.videoElement || !this.net){\n      this.initCapture();\n      return;\n    }\n\n    if(!this.video && this.videoElement){\n      this.video = await this.loadVideo(this.videoElement);\n    }\n\n    const poses = await this.net\n      .estimateSinglePose(this.video, imageScaleFactor, flipHorizontal, outputStride)\n\n    if(poses.keypoints) this.setState({ \n      loading: false,\n      poses: poses.keypoints\n              .reduce((obj, point) => ({ ...obj, \n                [point.part]: point\n              }), {}) \n    });\n    this.initCapture();\n  }\n\n  render() {\n    if(!this.props.children) {\n      return null;\n    }\n\n    return (\n      <div>\n        <video className=\"video\" playsInline ref={this.setRef} />\n        {this.props.children(this.state)}\n      </div>\n    );\n  }\n}\n\nPoseNet.propTypes = {\n  videoSize: PropTypes.number,\n};\n\nPoseNet.defaultProps = {\n  videoSize: 300,\n};\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport SVGGraph from './components/svgGraph';\nimport PoseNet from './components/posenet';\nimport './style.css';\n\nconst minScore = 0.5;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.nodes = [\n      { id: 'nose', r: 25 },\n      { id: 'leftShoulder', r: 5 },\n      { id: 'rightShoulder', r: 5 },\n      { id: 'leftElbow', r: 5 },\n      { id: 'rightElbow', r: 5 },\n      { id: 'leftWrist', r: 10 },\n      { id: 'rightWrist', r: 10 },\n      { id: 'leftHip', r: 5 },\n      { id: 'rightHip', r: 5 },\n      { id: 'leftKnee', r: 5 },\n      { id: 'rightKnee', r: 5 },\n      { id: 'leftAnkle', r: 10 },\n      { id: 'rightAnkle', r: 10 },\n    ];\n    this.links = [\n      { source: 'leftShoulder', target: 'rightShoulder' },\n      { source: 'rightWrist', target: 'rightElbow' },\n      { source: 'rightElbow', target: 'rightShoulder' },\n      { source: 'leftWrist', target: 'leftElbow' },\n      { source: 'leftElbow', target: 'leftShoulder' },\n      { source: 'rightAnkle', target: 'rightKnee' },\n      { source: 'rightKnee', target: 'rightHip' },\n      { source: 'rightHip', target: 'rightShoulder' },\n      { source: 'leftAnkle', target: 'leftKnee' },\n      { source: 'leftKnee', target: 'leftHip' },\n      { source: 'leftHip', target: 'leftShoulder' },\n      { source: 'leftHip', target: 'rightHip' },\n    ]\n  }\n\n  getNodesWithPosition(poses){\n    return this.nodes.reduce((arr, node) => {\n      const pose = poses[node.id] || {};\n      const position = (pose.position || {});\n\n      if(pose.score < minScore) {\n        return arr;\n      }\n      \n      return [...arr, { ...node, ...position }];\n    }, []);\n  }\n\n  getLinks(nodes){\n    const nodesIDs = nodes.map(node => node.id);\n\n    return this.links.filter(link => {\n      const source = (link.source || {}).id || link.source;\n      const target = (link.target || {}).id || link.target;\n      \n      return nodesIDs.includes(source) && nodesIDs.includes(target);\n    });\n  }\n\n  getGraph(poses){\n    const nodes = this.getNodesWithPosition(poses);\n\n    return { nodes, links: this.getLinks(nodes) };\n  }\n\n  render() {\n    const videoSize = 300;\n\n    return (\n      <PoseNet videoSize={videoSize}>\n      {\n        ({ poses, loading }) => (\n          loading \n          ? 'Loading...'\n          : (\n            <SVGGraph \n              graph={this.getGraph(poses)} \n            />\n          ))\n      }\n      </PoseNet>\n      \n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}